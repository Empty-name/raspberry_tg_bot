import sqlite3
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    filters, ContextTypes
)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TOKEN = "7744280511:AAGUeHaDppq0fCdhCe2IpSq2gT3iCc5WHrM"  # –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
DB_PATH = "users.db"  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
PC_MAC = "58:11:22:BD:08:DF"

# --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ–Ω—é –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±–æ—Ç–∞ ---
MAIN_MENU = [["üíª –í–∫–ª—é—á–∏—Ç—å –ü–ö", "üåê IP –∞–¥—Ä–µ—Å"],
             ["üïí Uptime", "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"]]

ADMIN_MENU = [["‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"],
              ["üõ† –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", "üìã –°–ø–∏—Å–æ–∫"],
              ["üîô –ù–∞–∑–∞–¥"]]

# --- –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
user_state = {}  # key: chat_id, value: —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "main" –∏–ª–∏ "admin")

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite ---
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–æ–ª–µ–π
    cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                        id INTEGER PRIMARY KEY,
                        username TEXT,
                        role TEXT CHECK(role IN ('admin', 'user')) NOT NULL)''')
    conn.commit()
    conn.close()

# --- –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ---
def get_user_role(user_id):
    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ Telegram ID
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT role FROM users WHERE id=?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None

def is_admin(user_id):
    return get_user_role(user_id) == "admin"

def add_user(user_id, username, role="user"):
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("INSERT OR IGNORE INTO users (id, username, role) VALUES (?, ?, ?)", (user_id, username, role))
    conn.commit()
    conn.close()

def remove_user(user_id):
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("DELETE FROM users WHERE id=?", (user_id,))
    conn.commit()
    conn.close()

def list_users():
    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT id, username, role FROM users")
    users = cursor.fetchall()
    conn.close()
    return users

def change_role(user_id, new_role):
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (admin/user)
    if new_role not in ("admin", "user"):
        return False
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET role=? WHERE id=?", (new_role, user_id))
    conn.commit()
    conn.close()
    return True

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if get_user_role(user_id):
        user_state[update.effective_chat.id] = "main"
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True))
    else:
        await update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ ---
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    text = update.message.text.strip()

    role = get_user_role(user_id)
    if role is None:
        await update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    state = user_state.get(chat_id, "main")  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
    if state == "main":
        if text == "üíª –í–∫–ª—é—á–∏—Ç—å –ü–ö":
            from subprocess import run
            run(["wakeonlan", PC_MAC])  # MAC-–∞–¥—Ä–µ—Å –ü–ö
            await update.message.reply_text("–ü–ö –≤–∫–ª—é—á—ë–Ω.")
        elif text == "üåê IP –∞–¥—Ä–µ—Å":
            from subprocess import check_output
            ip = check_output("hostname -I", shell=True).decode().strip()
            await update.message.reply_text(f"IP: {ip}")
        elif text == "üïí Uptime":
            from subprocess import check_output
            uptime = check_output("uptime", shell=True).decode().strip()
            await update.message.reply_text(uptime)
        elif text == "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å":
            if role != "admin":
                await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
                return
            user_state[chat_id] = "admin"
            await update.message.reply_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=ReplyKeyboardMarkup(ADMIN_MENU, resize_keyboard=True))

    # --- –ê–¥–º–∏–Ω-–º–µ–Ω—é ---
    elif state == "admin":
        if text == "üîô –ù–∞–∑–∞–¥":
            user_state[chat_id] = "main"
            await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True))
        elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
            user_state[chat_id] = "awaiting_add_id"
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        elif text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
            user_state[chat_id] = "awaiting_remove_id"
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        elif text == "üõ† –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å":
            user_state[chat_id] = "awaiting_change_role_id"
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–º–µ–Ω—ã —Ä–æ–ª–∏:")
        elif text == "üìã –°–ø–∏—Å–æ–∫":
            users = list_users()
            reply = "\n".join([f"üë§ {u[1]} (ID: {u[0]}, —Ä–æ–ª—å: {u[2]})" for u in users])
            await update.message.reply_text(reply or "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")

    # --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    elif state == "awaiting_add_id":
        context.user_data["new_id"] = int(text)
        user_state[chat_id] = "awaiting_add_username"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ username:")

    elif state == "awaiting_add_username":
        context.user_data["new_username"] = text
        user_state[chat_id] = "awaiting_add_role"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ä–æ–ª—å (user/admin):")

    elif state == "awaiting_add_role":
        uid = context.user_data["new_id"]
        uname = context.user_data["new_username"]
        role = text.strip().lower()
        if role in ("user", "admin"):
            add_user(uid, uname, role)
            await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω {uname} ({uid}) —Å —Ä–æ–ª—å—é {role}")
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å.")
        user_state[chat_id] = "admin"
        await update.message.reply_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=ReplyKeyboardMarkup(ADMIN_MENU, resize_keyboard=True))

    # --- –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    elif state == "awaiting_remove_id":
        remove_user(int(text))
        await update.message.reply_text("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω")
        user_state[chat_id] = "admin"
        await update.message.reply_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=ReplyKeyboardMarkup(ADMIN_MENU, resize_keyboard=True))

    # --- –°–º–µ–Ω–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    elif state == "awaiting_change_role_id":
        context.user_data["change_id"] = int(text)
        user_state[chat_id] = "awaiting_new_role"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å (user/admin):")

    elif state == "awaiting_new_role":
        uid = context.user_data["change_id"]
        role = text.strip().lower()
        if change_role(uid, role):
            await update.message.reply_text(f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {role}")
        else:
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —Ä–æ–ª–∏.")
        user_state[chat_id] = "admin"
        await update.message.reply_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=ReplyKeyboardMarkup(ADMIN_MENU, resize_keyboard=True))

# --- –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def block_others(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã, –≥–æ–ª–æ—Å–æ–≤—ã–µ –∏ —Ç.–ø.

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
def main():
    init_db()  # –°–æ–∑–¥–∞—ë–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(~filters.TEXT, block_others))
    app.run_polling()

if __name__ == "__main__":
    main()
